{"name":"Proj4js","tagline":"git-svn clone of http://trac.osgeo.org/proj4js/. No automatic updates.","body":"#PROJ4JS\r\n\r\nProj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations.\r\nOrigionally a port of [PROJ.4](http://trac.osgeo.org/proj/) and [GCTCP C](http://edcftp.cr.usgs.gov/pub//software/gctpc) it is\r\na part of the [MetaCRS](http://wiki.osgeo.org/wiki/MetaCRS) group of projects.\r\n\r\n##Installing\r\n\r\nDepending on your preferences\r\n\r\n```bash\r\nnpm install proj4js\r\nbower install proj4js\r\njam install proj4js\r\n```\r\n\r\nor just manually grab the file `dist/proj4.js`\r\n\r\n##Using\r\n\r\nthe basic signature is:\r\n\r\n```javascript\r\nproj4(fromProjection[, toProjection2, coordinates])\r\n```\r\n\r\nProjections can be proj or wkt strings, or a proj4.Proj object.\r\n\r\nCoordinates may be proj4.Point objects, an object of the form `{x:x,y:y}`, or an array of the form `[x,y]`.\r\n\r\nWhen all 3 arguments  are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\r\n\r\n```javascript\r\nvar firstProjection = 'PROJCS[\"NAD83 / Massachusetts Mainland\",GEOGCS[\"NAD83\",DATUM[\"North_American_Datum_1983\",SPHEROID[\"GRS 1980\",6378137,298.257222101,AUTHORITY[\"EPSG\",\"7019\"]],AUTHORITY[\"EPSG\",\"6269\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4269\"]],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],PROJECTION[\"Lambert_Conformal_Conic_2SP\"],PARAMETER[\"standard_parallel_1\",42.68333333333333],PARAMETER[\"standard_parallel_2\",41.71666666666667],PARAMETER[\"latitude_of_origin\",41],PARAMETER[\"central_meridian\",-71.5],PARAMETER[\"false_easting\",200000],PARAMETER[\"false_northing\",750000],AUTHORITY[\"EPSG\",\"26986\"],AXIS[\"X\",EAST],AXIS[\"Y\",NORTH]]';\r\nvar secondProjection = \"+proj=gnom +lat_0=90 +lon_0=0 +x_0=6300000 +y_0=6300000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\";\r\n//I'm not going to redefine those two in latter examples.\r\nproj4(firstProjection,secondProjection,[2,5]);\r\n// [-2690666.2977344505, 3662659.885459918]\r\n```\r\n\r\nIf only 1 projection is given then it is assumed that it is being projected *from* WGS84 (fromProjection is WGS84).\r\n\r\n```javascript\r\nproj4(firstProjection,[-71,41]);\r\n// [242075.00535055372, 750123.32090043]\r\n```\r\n\r\nIf no coordinates are given an object with two methods is returned, its methods are `forward` which projects from the first projection to the second and `inverse` which projects from the second to the first.\r\n\r\n```javascript\r\nproj4(firstProjection,secondProjection).forward([2,5]);\r\n// [-2690666.2977344505, 3662659.885459918]\r\nproj4(secondProjection,firstProjection).inverse([2,5]);\r\n// [-2690666.2977344505, 3662659.885459918]\r\n```\r\n\r\nand as above if only one projection is given, it's assumed to be coming from wgs84\r\n\r\n```javascript\r\nproj4(firstProjection).forward([-71,41]);\r\n// [242075.00535055372, 750123.32090043]\r\nproj4(firstProjection).inverse([242075.00535055372, 750123.32090043]);\r\n//[-71, 40.99999999999986]\r\n//the floating points to answer your question\r\n```\r\n\r\n\r\n##Developing\r\nto set up build tools make sure you have node installed and run `npm install`\r\n\r\nto build run `grunt` if that doesn't work try:\r\n\r\n```bash\r\nnpm install -g grunt-cli #you may need a sudo in front of that\r\n```\r\n","google":"UA-40454900-1","note":"Don't delete this file! It's used internally to help with page regeneration."}